# -*- coding: utf-8 -*-
import pandas as pd
import numpy as np
import cv2
import numpy as np
import colorsys

class EarthTones(object):

    def __init__(self,n,outmin,outmax):

        self.index =     [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194]
        self.c = {'r' :  [ 94, 82, 85, 33, 42, 32, 46, 55, 53, 53, 55, 69, 74, 71, 71, 70, 70, 69, 74, 95, 82, 84, 96, 82, 82, 90, 99, 90, 84, 90, 87, 82, 96, 90, 87, 24, 27, 43, 37, 49, 49, 57, 57, 34, 49, 54, 54, 45, 55, 41, 57, 70, 78, 82, 82, 90, 96, 90, 99, 74, 94, 76, 90, 85, 99, 79, 82,111,109,109,109,110,112,107,105,130,131,125,145,116,131,118,147,107,107,104, 99, 99, 99,107, 99,115,115,107,115,120,115,123,139,106,125,137,137,106,108,129,132,105,115,123,133,105,130,114,133,151,165,152,157,148,166,150,170,173,170,191,194,150,172,187,203,107,111,107,103,115,123,115,116,123,123,123,123,132,127,137,154,112,123,134,133,145,157,152,153,125,127,143,143,159,158,155,153,177,182,177,175,165,165,173,189,174,192,178,191,206,208,204,214,176,177,202,205,189,201,209,206,225,226,214,232,228,231,239,247],
                  'g' :  [ 74, 74, 70, 99, 91, 91, 90, 93,108, 90,105, 94, 90, 87, 93,107, 99,111,115, 90, 90, 90, 90, 82, 90, 82, 86, 99,115, 99,113, 99, 93,103,121, 82, 96, 84,103, 90, 99, 82, 90, 91, 90, 94, 96,107,112,111,115, 86, 86, 90, 86, 82, 87, 84, 84, 99, 94,108,114, 95, 99,112,129, 56, 80, 98, 97, 83, 87,103,103, 58, 86, 87, 88,109,111,105,105, 94, 96,107,107, 99,107, 99,107, 94,104,107, 99, 98,107,104,105,123,121,127,127,118,135,118,137,115,115,115,115,121,121,138,141,132,146,127,144,136,139,135,135,160,160,177,183,159,163,176,193,107,111,119,129,115,115,115,125,123,132,132,123,120,127,129,132,143,150,132,146,143,145,155,167,148,162,150,155,151,154,169,173,153,160,173,170,165,173,170,173,183,184,185,190,197,197,194,210,181,195,193,207,206,206,214,222,218,225,226,229,228,239,235,244],
                  'b' :  [ 57, 66, 79, 33, 32, 60, 57, 32, 36, 54, 50, 31, 41, 51, 51, 37, 53, 49, 57, 17, 33, 43, 41, 57, 57, 57, 53, 27, 34, 45, 45, 57, 54, 55, 54, 74, 74, 74, 74, 74, 66, 66, 66, 87, 82, 79, 93, 88, 88,107,107, 72, 74, 66, 78, 66, 66, 76, 76, 66, 74, 74, 75, 89, 90, 98,114, 20, 24, 15, 33, 52, 68, 41, 58, 14, 25, 49, 46, 15, 17, 54, 56, 78, 87, 79, 90, 99, 99, 99,107, 74, 79, 94, 94, 79, 99, 86, 79, 36, 27, 20, 37, 65, 68, 60, 63, 93, 99, 82, 86, 96, 91, 92, 90, 18, 15, 42, 38, 71, 67, 91, 91, 20, 55, 26, 59, 88, 88, 86, 91,107,107,111,116,107,107,115,115,111,107,115,123,109,123,111,110,119,122,126,118,115,113,115,115,138,148,133,145,136,150,136,156,111,129,122,145,160,156,160,156,130,123,156,153,130,153,163,158,175,186,176,179,202,203,205,222,185,207,222,215,224,235,229,241]}

        self.colors=self.GetColors(n)
        self.outmin=outmin
        self.outmax=outmax
        self.inmin=0
        self.inmax=len(self.colors.index)-1

    def Transition(self, value, maximum, start_point, end_point):
        return start_point + (end_point - start_point)*value/maximum

    def Transition3(self, (s1, s2, s3), (e1, e2, e3)):
        r1= self.Transition(0.5, 213, s1, e1)
        r2= self.Transition(0.5, 213, s2, e2)
        r3= self.Transition(0.5, 213, s3, e3)
        return (r1, r2, r3)

    def Interpolate(self, (s1, s2, s3), (e1, e2, e3)):
        transition=self.Transition3(colorsys.rgb_to_hsv(s1,s2,s3),colorsys.rgb_to_hsv(e1,e2,e3))
        return colorsys.hsv_to_rgb(transition[0],transition[1],transition[2])
    
    def InterpolateDf(self, colors):
        n1=np.empty((0,), dtype=[('r', np.uint16), ('g', np.uint16), ('b', np.uint16)])
        i=0
        out=pd.DataFrame(n1,index=[])
        for ix, acolor in enumerate(colors.values):
            if(ix % 2) == 0:
                out.loc[i]=acolor
            else:
                out.loc[i]=self.Interpolate(out.loc[ix-1],acolor)
                out.loc[i+1]=acolor
                i+=1
            i+=1
        return out

    def GetColors(self,n):
        if n == 0:
            return pd.DataFrame(self.c,index=self.index).astype(int)       
        colors=self.InterpolateDf(pd.DataFrame(self.c,index=self.index).astype(int))
        for i in range(0,n-1): # first already done above
            colors=self.InterpolateDf(colors)
        return colors

    def MapColor(self,value):
        #(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
        index = int(round(float(value - self.outmin) * float(self.inmax - self.inmin) / float(self.outmax - self.outmin) + self.outmin))
        return self.colors.values[index]

# In[ ]:
if __name__ == '__main__':
    print("earthTones class test")
    canvas = np.zeros((800, 800, 3), dtype = "uint8")
    j=0
    i=0
    earthTones=EarthTones(0,0,0)
    for ix, acolor in enumerate(earthTones.colors.values):
        r,g,b=acolor
        color=b,g,r
        x=i*10
        y=j*10
        cv2.rectangle(canvas,(x,y),(x+8,y+8),color,-1)
        if ((ix + 1) % 16) == 0:
            j+=1
            i=0
        else:
            i+=1
    cv2.imshow("Colors",canvas)
    cv2.waitKey(0)